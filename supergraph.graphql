schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type MenuCategory {
  MenuCategoryName: String!
  MenuItems: [MenuItem]
}

input MenuCategoryInput {
  Description: String
  MenuCategoryName: String!
}

type MenuItem {
  CategoryId: Int!
  Description: String!
  ItemId: ID!
  ItemName: String!
  MenuCategoryName: String!
  Price: Float!
}

input MenuItemInput {
  Category: String!
  Description: String
  Name: String!
  Price: Float!
}

type Mutation {
  createMenuCategory(menuCategory: MenuCategoryInput!): MenuCategory @join__field(graph: MENUMANAGEMENT)
  createMenuItem(menuItem: MenuItemInput!): MenuItem @join__field(graph: MENUMANAGEMENT)
  createOrder(order: OrderInput!): Order @join__field(graph: ORDERPROCESSING)
  createOrderItem(orderItem: OrderItemInput!): OrderItem @join__field(graph: ORDERPROCESSING)
  createTable(capacity: Int!, tableName: String!): Table @join__field(graph: TABLEBOOKING)
  createTableBooking(bookingDuration: Int!, tableName: String!, userName: String!): TableBooking @join__field(graph: TABLEBOOKING)
  createTableData(tableData: TableDataInput!): TableData @join__field(graph: ORDERPROCESSING)
  deleteMenuCategory(name: String!): SuccessMessage @join__field(graph: MENUMANAGEMENT)
  deleteMenuItem(id: Int!): SuccessMessage @join__field(graph: MENUMANAGEMENT)
  deleteOrder(id: ID!): SuccessMessage @join__field(graph: ORDERPROCESSING)
  deleteOrderItem(id: ID!): SuccessMessage @join__field(graph: ORDERPROCESSING)
  deleteTable(tableName: String!): Table @join__field(graph: TABLEBOOKING)
  deleteTableBooking(userName: String!): TableBooking @join__field(graph: TABLEBOOKING)
  deleteTableData(id: ID!): SuccessMessage @join__field(graph: ORDERPROCESSING)
  toggleTableAvailability(tableName: String!): Table @join__field(graph: TABLEBOOKING)
  updateOrder(id: ID!, order: OrderInput!): Order @join__field(graph: ORDERPROCESSING)
  updateOrderItem(id: ID!, orderItem: OrderItemInput!): OrderItem @join__field(graph: ORDERPROCESSING)
  updateTableData(id: ID!, tableData: TableDataInput!): TableData @join__field(graph: ORDERPROCESSING)
}

type Order {
  CustomerId: Int!
  OrderId: ID!
  OrderTime: String!
  Status: String!
}

input OrderInput {
  CustomerId: Int!
  OrderTime: String!
  Status: String!
}

type OrderItem {
  OrderItemId: ID!
  Price: Float!
  Quantity: Int!
}

input OrderItemInput {
  Price: Float!
  Quantity: Int!
}

type Query {
  getAllTableBookings: [TableBooking] @join__field(graph: TABLEBOOKING)
  getAllTables: [Table] @join__field(graph: TABLEBOOKING)
  getAvailableTables: [Table] @join__field(graph: TABLEBOOKING)
  getOrder(id: ID!): Order @join__field(graph: ORDERPROCESSING)
  getOrderItem(id: ID!): OrderItem @join__field(graph: ORDERPROCESSING)
  getOrderItems: [OrderItem] @join__field(graph: ORDERPROCESSING)
  getOrders: [Order] @join__field(graph: ORDERPROCESSING)
  getTableBookingByUserName(userName: String!): [TableBooking] @join__field(graph: TABLEBOOKING)
  getTableData(id: ID!): TableData @join__field(graph: ORDERPROCESSING)
  getTableDatas: [TableData] @join__field(graph: ORDERPROCESSING)
  menuCategories: [MenuCategory] @join__field(graph: MENUMANAGEMENT)
  menuCategoryByName(name: String!): MenuCategory @join__field(graph: MENUMANAGEMENT)
  menuItem(id: ID!): MenuItem @join__field(graph: MENUMANAGEMENT)
  menuItems: [MenuItem] @join__field(graph: MENUMANAGEMENT)
  menuItemsForCategory(categoryId: String!): [MenuItem] @join__field(graph: MENUMANAGEMENT)
}

type SuccessMessage {
  success: Boolean!
}

type Table {
  capacity: Int!
  isAvailable: Boolean!
  tableId: ID!
  tableName: String!
}

type TableBooking {
  bookingDate: String!
  bookingDuration: Int!
  bookingStatus: String!
  id: ID!
  tableName: String!
  userName: String!
}

type TableData {
  Id: ID!
  IsAvailable: String!
}

input TableDataInput {
  IsAvailable: String!
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  MENUMANAGEMENT @join__graph(name: "MenuManagement" url: "http://menu-service:4001/graphql")
  ORDERPROCESSING @join__graph(name: "OrderProcessing" url: "http://order-service:4002/graphql")
  TABLEBOOKING @join__graph(name: "TableBooking" url: "http://table-service:40000/graphql")
}

type schema {
  mutation: Mutation
  query: Query
}

